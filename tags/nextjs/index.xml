<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>NextJs on Hyungkeun World!</title>
        <link>https://choihyungkuen.github.io/tags/nextjs/</link>
        <description>Recent content in NextJs on Hyungkeun World!</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>최형근</copyright>
        <lastBuildDate>Sat, 20 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://choihyungkuen.github.io/tags/nextjs/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>NextJs Hydration</title>
        <link>https://choihyungkuen.github.io/p/nextjs-hydration/</link>
        <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://choihyungkuen.github.io/p/nextjs-hydration/</guid>
        <description>&lt;h1 id=&#34;hydration&#34;&gt;Hydration&lt;/h1&gt;
&lt;p&gt;Server Side에서 렌더링 된 정적 페이지(HTML)와 번들링 된 JS파일을 클라이언트에게 보내면, Client-Side에서 HTML 코드와 JS(React) 코드를 매칭시키는 과정을 Hydration이라고 한다. 참고로 Hydration은 “수분공급”이라는 뜻을 가지고 있는데 아무것도 없는 dummy html 파일에 JS 코드들이 DOM 요소 위에 물을 채우듯 필요로 하던 요소들을 채운다하여 붙여진 이름이라고 한다.&lt;/p&gt;
&lt;h1 id=&#34;hydration-진행과정&#34;&gt;Hydration 진행과정&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-hydration/assets/process.png&#34;
	width=&#34;1128&#34;
	height=&#34;555&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-hydration/assets/process_huc53a3d5e62847589df86285b9fa90cdb_99771_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-hydration/assets/process_huc53a3d5e62847589df86285b9fa90cdb_99771_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;487px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;React로 페이지를 제작한다.&lt;/li&gt;
&lt;li&gt;Next.js는 React에서 HTML 파일을 생성하기 위한 React Server-Side API인 ReactDOMServer을 사용해 제작된 사이트의 프로덕션 단계 파일을 생성한다.&lt;/li&gt;
&lt;li&gt;만약 이때 웹 페이지를 보게 된다면, 서버로부터 생성된 정적인 HTML 파일을 보게 될 것이다.&lt;/li&gt;
&lt;li&gt;페이지 첫 로딩 이후 JS가 로드 되고, &lt;code&gt;ReactDOM.hydrate()&lt;/code&gt; API는 JS와 함께 서버에서 렌더링되었던 HTML 페이지에 수분을 공급한다.&lt;/li&gt;
&lt;li&gt;Hydration 이후, &lt;code&gt;React reconciler&lt;/code&gt; API가 자리를 대체하고, 사이트는 상호작용이 가능해진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;더 나아가, Client Side에서 JS 파일이 렌더링 될 때, 단지 각 DOM 요소에 JS 속성을 매칭시킬 뿐 실제 웹 페이지를 다시 그리는 paint() 함수까지 호출하지않는다.&lt;/p&gt;
&lt;h1 id=&#34;use-client&#34;&gt;use client&lt;/h1&gt;
&lt;p&gt;위에서 언급된 hydration 과정이 모든 컴포넌트에 대해서는 발생하지 않는다. client side에서 상호작용이 가능하게 만들어지는 컴포넌트는 오직 use client라고 지시어를 붙인 컴포넌트들 뿐이다. 위에서 작성했던 컴포넌트들을 살펴보면 AboutUs 컴포넌트에는 use client 지시어가 없는 것을 볼 수 있는데 이는 hydrate 과정이 필요한 컴포넌트가 아니기 때문에 해당 지시어가 필요없다. 또한, 이렇게 구별이 된다면 사용자는 좀 더 적은 용량의 JS를 다운로드 받는다는 장점이 있다. (use client 가 없는 경우는 hydration이 필요없는 상태, 즉 JS가 필요없는 상태임을 의미한다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NextJs Route</title>
        <link>https://choihyungkuen.github.io/p/nextjs-route/</link>
        <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://choihyungkuen.github.io/p/nextjs-route/</guid>
        <description>&lt;h1 id=&#34;routes&#34;&gt;Routes&lt;/h1&gt;
&lt;p&gt;기존 react를 사용할 때는 React Router 라이브러리를 활용해서 아래와 같이 라이브러리에서 제공하는 컴포넌트를 활용해서 코드를 정의하여 url router를 사용할 수 있었다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jsx&#34; data-lang=&#34;jsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Router&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Route&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;GalleryPage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Route&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/about-us&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;AboutUs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Route&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/movies/:id&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Movie&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;Routes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;하지만 nextjs에서는 아래의 규칙을 활용하면 빠르고 쉽게 url router를 지정할 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;app 폴더에 있는 page.tsx는 /(루트 경로) 이다.&lt;/li&gt;
&lt;li&gt;app 하위에 폴더를 만들면 그 폴더의 이름으로 url을 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;해당 route 폴더 안에는 반드시 page.tsx라는 이름으로 파일을 만들어야 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;예를 들어서 /about-us 라는 url 경로에 페이지를 만들고 싶으면 아래와 같이 작성해주면 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route1.png&#34;
	width=&#34;1313&#34;
	height=&#34;567&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route1_hu4f28e6ef322af0bd4612549595e9615e_105903_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-route/assets/route1_hu4f28e6ef322af0bd4612549595e9615e_105903_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;231&#34;
		data-flex-basis=&#34;555px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;그러면 해당 url에 맞는 페이지가 뜨는 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route2.png&#34;
	width=&#34;985&#34;
	height=&#34;330&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route2_hu3d13c824abb60a1a27c68c1218299973_30687_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-route/assets/route2_hu3d13c824abb60a1a27c68c1218299973_30687_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;298&#34;
		data-flex-basis=&#34;716px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;좀 더 복잡한 url 형식으로 /about-us/company/sales 를 다음과 같이 만들 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route3.png&#34;
	width=&#34;1247&#34;
	height=&#34;634&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route3_hu03283e6f18c233a2fb149ae2450cf624_128859_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-route/assets/route3_hu03283e6f18c233a2fb149ae2450cf624_128859_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;472px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route4.png&#34;
	width=&#34;997&#34;
	height=&#34;261&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route4_huc226a24d41c7e8476f28670590cee597_32048_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-route/assets/route4_huc226a24d41c7e8476f28670590cee597_32048_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;381&#34;
		data-flex-basis=&#34;916px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;하지만 page.tsx가 없는 /about-us/company 경로에 접속시 아래와 같은 404 메시지를 볼 수 있다. 이렇게 page.tsx 파일이 없는 경로는 그저 경로의 일부분이 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route5.png&#34;
	width=&#34;1544&#34;
	height=&#34;731&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-route/assets/route5_hu690ad75d1369f1acc618cd019cecfa95_58971_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-route/assets/route5_hu690ad75d1369f1acc618cd019cecfa95_58971_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;211&#34;
		data-flex-basis=&#34;506px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;또한, page.tsx라는 이름이 아닌 다른 파일을 생성하게 되면 그 경로는 지정되지 않는다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NextJs 시작해보기</title>
        <link>https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/</link>
        <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/</guid>
        <description>&lt;h1 id=&#34;ssr-vs-csr&#34;&gt;SSR vs CSR&lt;/h1&gt;
&lt;h2 id=&#34;csr&#34;&gt;CSR&lt;/h2&gt;
&lt;p&gt;CSR은 Client Side Rendering의 약자로, 말 그대로 SSR과 달리 렌더링이 클라이언트(브라우저) 쪽에서 일어난다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/csr.png&#34;
	width=&#34;1280&#34;
	height=&#34;720&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/csr_hu77573f07371f20ba3446bb0697f9e836_211610_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/csr_hu77573f07371f20ba3446bb0697f9e836_211610_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;위의 사진은 CSR의 단계를 설명한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. User가 Website 요청을 보냄.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. CDN이 HTML 파일과 JS로 접근할 수 있는 링크를 클라이언트로 보낸다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CDN : aws의 cloudflare를 생각하면 됨. 엔드 유저의 요청에 &amp;lsquo;물리적&amp;rsquo;으로 가까운 서버에서 요청에 응답하는 방식&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3, 4. 라이언트는 HTML과 JS를 다운로드 받는다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(이때 SSR과 달리 유저는 아무것도 볼 수 없다.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 다운이 완료된 JS가 실행된다. 데이터를 위한 API가 호출된다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(이때 유저들은 placeholder를 보게된다. )&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 서버가 API로부터의 요청에 응답한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. API로부터 받아온 data를 placeholder 자리에 넣어준다. 이제 페이지는 상호작용이 가능해진다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/csr-simple.png&#34;
	width=&#34;1280&#34;
	height=&#34;903&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/csr-simple_hud1ae7fe78c0369b493a8a425b0823e93_263727_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/csr-simple_hud1ae7fe78c0369b493a8a425b0823e93_263727_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;즉, 서버에서 처리 없이 클라이언트로 보내주기 때문에 자바스크립트가 모두 다운로드 되고 실행이 끝나기 전까지 사용자는 볼 수 있는게 없다.&lt;/p&gt;
&lt;h2 id=&#34;ssr&#34;&gt;SSR&lt;/h2&gt;
&lt;p&gt;SSR은 Server Side Rendering의 약자로, 말 그대로 서버쪽에서 렌더링 준비를 끝마친 상태로 클라이언트에 전달하는 방식이다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/ssr.png&#34;
	width=&#34;1280&#34;
	height=&#34;720&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/ssr_hu77573f07371f20ba3446bb0697f9e836_194115_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/ssr_hu77573f07371f20ba3446bb0697f9e836_194115_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
위의 사진은 SSR의 단계를 설명한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;User가 Website 요청을 보냄.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Server는 &amp;lsquo;Ready to Render&amp;rsquo;. 즉, 즉시 렌더링 가능한 html파일을 만든다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(리소스 체크, 컴파일 후 완성된 HTML 컨텐츠로 만든다.)&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;클라이언트에 전달되는 순간, 이미 렌더링 준비가 되어있기 때문에 HTML은 즉시 렌더링 된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그러나 사이트 자체는 조작 불가능하다. (Javascript가 읽히기 전이다.) 4. 클라이언트가 자바스크립트를 다운받는다. 5. 다운 받아지고 있는 사이에 유저는 컨텐츠는 볼 수 있지만 사이트를 조작 할 수는 없다. 이때의 사용자 조작을 기억하고 있는다. 6. 브라우저가 Javascript 프레임워크를 실행한다. 7. JS까지 성공적으로 컴파일 되었기 때문에 기억하고 있던 사용자 조작이 실행되고 이제 웹 페이지는 상호작용 가능해진다.&lt;/p&gt;
&lt;p&gt;즉, 서버에서 이미 ‘렌더 가능한’ 상태로 클라이언트에 전달되기 때문에, JS가 다운로드 되는 동안 사용자는 무언가를 보고 있을 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;두-방식의-차이점&#34;&gt;두 방식의 차이점&lt;/h2&gt;
&lt;h3 id=&#34;1-웹페이지를-로딩하는-시간&#34;&gt;&lt;strong&gt;1. 웹페이지를 로딩하는 시간&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;웹 페이지 로딩의 종류는 두 가지로 나눌 수 있다.&lt;/p&gt;
&lt;p&gt;하나는 웹 사이트의 가장 첫 페이지를 로딩하는 것. 다른 하나는 나머지를 로딩하는 것.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;첫 페이지 로딩시간&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSR의 경우 HTML, CSS와 모든 스크립트들을 한 번에 불러온다. 반면 SSR은 필요한 부분의 HTML과 스크립트만 불러오게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ 따라서 &lt;strong&gt;평균적으로 SSR이 더 빠르다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;나머지 로딩 시간&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;첫 페이지를 로딩한 후, 사이트의 다른 곳으로 이동하는 식의 동작을 가정하자. CSR은 이미 첫 페이지 로딩할 때 나머지 부분을 구성하는 코드를 받아왔기 때문에 빠르다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반면, SSR은 첫 페이지를 로딩한 과정을 정확하게 다시 실행한다. 그래서 더 느리다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-seo-대응&#34;&gt;&lt;strong&gt;2. SEO 대응&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;검색 엔진은 자동화된 로봇인 &amp;lsquo;크롤러&amp;rsquo;로 웹 사이트들을 읽는다. CSR은 자바스크립트를 실행시켜 동적으로 컨텐츠가 생성되기 때문에 자바스크립트가 실행 되어야 &lt;strong&gt;meatadata&lt;/strong&gt;가 바뀌었다.&lt;/p&gt;
&lt;p&gt;(이전 크롤러들은 자바스크립트를 실행시키지 않았었기에 SEO 최적화가 필수적이었다. 구글이 그 트렌드를 바꾸고 있다고 한다.)&lt;/p&gt;
&lt;p&gt;SSR은 애초에 서버 사이드에서 컴파일되어 클라이언트로 넘어오기 때문에 크롤러에 대응하기 용이하다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 서버 자원 사용&lt;/strong&gt; &lt;strong&gt;SSR이 서버 자원을 더 많이 사용&lt;/strong&gt;한다. 매번 서버에 요청을 하기 때문이다.
리엑트로 구현할 때는 다음과 같은 문제가 생기기도 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;renderToStrng은 React에서 서버사이드 렌더링을 구현하는데 사용되는 메소드다. 그런데 이게 스택을 막고 동기적으로 처리된다. 이게 실행될 동안 서버는 멈춘다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>NextJs 시작해보기</title>
        <link>https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/</link>
        <pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/</guid>
        <description>&lt;p&gt;아래 명령어로 프로제트 초기화&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; npm init -y
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; npm install react@latest next@latest react-dom@latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;package.json에 scripts 부분 수정&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nt&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;next dev&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;해당 프로젝트 폴더에 app/page.tsx 파일 만들고 아래 내용 작성&lt;/p&gt;
&lt;p&gt;반드시 page.tsx라는 이름의 파일로 만들어야 / (루트)에 라우팅 페이지가 만들어진다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Page() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NextJS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;에디터에서 아래와 같이 에러가 발생할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/error.png&#34;
	width=&#34;1545&#34;
	height=&#34;477&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/error_hu9e502c342054a9647801e85df2342bdb_103898_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/error_hu9e502c342054a9647801e85df2342bdb_103898_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;323&#34;
		data-flex-basis=&#34;777px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;해당 에러는 typescript가 설치되지 않았다고 뜨는 문제인데 아래의 명령어를 수행하면 typesciprt와 더불어 필요한 라이브러리들이 자동으로 설치 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; npm run dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/typescript.png&#34;
	width=&#34;1814&#34;
	height=&#34;931&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/typescript_hu8fd160dc135261d107748b92bce4c5bf_204714_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/typescript_hu8fd160dc135261d107748b92bce4c5bf_204714_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;이후에 터미널에서 “Local: http://localhost:3001”로 뜨는데 해당 주소를 들어가면 아래와 같이 웹페이지가 뜨는 것을 확인 할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/result.png&#34;
	width=&#34;1143&#34;
	height=&#34;516&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/result_hud4ae3d73e7fc02d18de613a7e9b40277_43223_480x0_resize_box_3.png 480w, https://choihyungkuen.github.io/p/nextjs-%EC%8B%9C%EC%9E%91%ED%95%B4%EB%B3%B4%EA%B8%B0/assets/result_hud4ae3d73e7fc02d18de613a7e9b40277_43223_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;531px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>NextJs란?</title>
        <link>https://choihyungkuen.github.io/p/nextjs%EB%9E%80/</link>
        <pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://choihyungkuen.github.io/p/nextjs%EB%9E%80/</guid>
        <description>&lt;h1 id=&#34;nextjs란&#34;&gt;&lt;strong&gt;Next.js란?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://choihyungkuen.github.io/p/nextjs%EB%9E%80/assets/next-framework.jpeg&#34;
	width=&#34;900&#34;
	height=&#34;589&#34;
	srcset=&#34;https://choihyungkuen.github.io/p/nextjs%EB%9E%80/assets/next-framework_hu50482d5a58b283d35035c135ff510ce7_54226_480x0_resize_q75_box.jpeg 480w, https://choihyungkuen.github.io/p/nextjs%EB%9E%80/assets/next-framework_hu50482d5a58b283d35035c135ff510ce7_54226_1024x0_resize_q75_box.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;366px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;React 를 기반으로하는 웹 개발 프레임워크이다. Next.js는 웹 애플리케이션 개발에 있어 매력적인 선택지로 만드는 여러 가지 주요 기능과 장점을 제공한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;자동 코드 분할&lt;/strong&gt; : Next.js는 각 페이지에서 사용되는 컴포넌트를 기반으로 애플리케이션 코드를 자동으로 작은 번들로 분할하여 사용자가 현재 페이지에 필요한 코드만 다운로드하도록 한다. 이로 인해 로딩 시간이 단축되고 성능이 향상된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;핫 모듈 교체&lt;/strong&gt; : Next.js는 핫 모듈 교체(HMR)를 지원하여 개발자들이 전체 페이지를 새로 고치지 않고도 애플리케이션의 변경 사항을 볼 수 있다. 이는 개발 경험을 크게 향상시키고 개발 프로세스를 가속화한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;자동 페이지 라우팅&lt;/strong&gt;: Next.js는 &amp;ldquo;pages&amp;rdquo; 디렉토리의 파일 구조를 기반으로 자동으로 페이지 라우팅을 처리한다. 이를 통해 개발 프로세스가 간소화되고 수동으로 라우트를 구성할 필요가 없어진다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;통합된 API 개발&lt;/strong&gt; : Next.js는 개발자들이 애플리케이션 내에서 쉽게 서버리스 API 경로를 생성할 수 있도록 지원하여 풀 스택 애플리케이션 개발 프로세스를 간소화하고 프론트엔드와 백엔드 간의 원활한 통신을 가능하게 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하이브리드 렌더링&lt;/strong&gt; : Next.js는 서버 사이드 렌더링(SSR)과 정적 사이트 생성(SSG)을 모두 지원하여 개발자들이 특정 사용 사례에 가장 적합한 방식을 선택하거나 하나의 애플리케이션 내에서 두 기술을 결합할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;내장된 CSS 및 JavaScript 지원&lt;/strong&gt; : Next.js에는 CSS 모듈 및 styled-components와 같은 인기 있는 CSS-in-JS 솔루션에 대한 내장 지원이 포함되어 있다. 또한 ES 모듈과 동적 임포트와 같은 현대적인 JavaScript 기능을 지원한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;확장성&lt;/strong&gt; : Next.js는 플러그인, 미들웨어, 사용자 정의 설정을 통해 쉽게 확장할 수 있도록 설계되었다. 이를 통해 개발자들은 프레임워크를 특정 요구에 맞게 맞춤화하고 다른 도구와 서비스통합할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;큰 규모의 활발한 커뮤니티&lt;/strong&gt; : Next.js에는 지속적으로 개발과 유지보수가 이루어지는 많은 개발자들로 이루어진 커뮤니티가 있다. 이 활발한 커뮤니티는 Next.js 애플리케이션의 기능을 확장하고 일반적인 개발 과제를 해결하기 위한 다양한 리소스, 제3자 라이브러리, 도구를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
